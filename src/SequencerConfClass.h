/*----- PROTECTED REGION ID(SequencerConfClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        SequencerConfClass.h
//
// description : Include for the SequencerConfClass root class.
//               This class is the singleton class for.
//               the SequencerConf device class..
//               It contains all properties and methods which the .
//               SequencerConf requires only once e.g. the commands.
//
// project :     Configurable Sequencer.
//
// $Author: graziano $
//
// $Revision: 1.2 $
// $Date: 2013-11-19 14:58:56 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/sequencerconf/src/SequencerConfClass.h,v $
// $Log: SequencerConfClass.h,v $
// Revision 1.2  2013-11-19 14:58:56  graziano
// development
//
// Revision 1.1  2013-11-15 08:15:09  graziano
// first commit
//
//
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SEQUENCERCONFCLASS_H
#define SEQUENCERCONFCLASS_H

#include <tango.h>
#include <SequencerConf.h>

/*----- PROTECTED REGION END -----*/

namespace SequencerConf_ns
{
	/*----- PROTECTED REGION ID(SequencerConf::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SequencerConf::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute ElapsedTime class definition
class ElapsedTimeAttrib: public Tango::Attr
{
public:
	ElapsedTimeAttrib():Attr("ElapsedTime",
	                   Tango::DEV_LONG, Tango::READ) {};
	~ElapsedTimeAttrib() {};

	ElapsedTimeAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_LONG, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_ElapsedTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_ElapsedTime_allowed(ty);}
};

//	Attribute RemainingTime class definition
class RemainingTimeAttrib: public Tango::Attr
{
public:
	RemainingTimeAttrib():Attr("RemainingTime",
	                   Tango::DEV_LONG, Tango::READ) {};
	~RemainingTimeAttrib() {};

	RemainingTimeAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_LONG, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_RemainingTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_RemainingTime_allowed(ty);}
};

//	Attribute Step class definition
class StepAttrib: public Tango::Attr
{
public:
	StepAttrib():Attr("Step",
	                   Tango::DEV_LONG, Tango::READ) {};
	~StepAttrib() {};

	StepAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_LONG, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_Step(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_Step_allowed(ty);}
};

//	Attribute StepError class definition
class StepErrorAttrib: public Tango::Attr
{
public:
	StepErrorAttrib():Attr("StepError",
	                   Tango::DEV_STRING, Tango::READ) {};
	~StepErrorAttrib() {};

	StepErrorAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_STRING, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_StepError(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_StepError_allowed(ty);}
};

//	Attribute StepStatus class definition
class StepStatusAttrib: public Tango::Attr
{
public:
	StepStatusAttrib():Attr("StepStatus",
	                   Tango::DEV_STRING, Tango::READ) {};
	~StepStatusAttrib() {};

	StepStatusAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_STRING, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_StepStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_StepStatus_allowed(ty);}
};

//	Attribute Log class definition
class LogAttrib: public Tango::SpectrumAttr
{
public:
	LogAttrib():SpectrumAttr("Log",
	                   Tango::DEV_STRING, Tango::READ, LOG_SIZE) {};
	~LogAttrib() {};

	LogAttrib(const string &att_name, long size):SpectrumAttr(att_name.c_str(),
		                   Tango::DEV_STRING, Tango::READ, size) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_Log(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_Log_allowed(ty);}
};

//	Attribute Version class definition
class VersionAttrib: public Tango::Attr
{
public:
	VersionAttrib():Attr("Version",
	                   Tango::DEV_STRING, Tango::READ) {};
	~VersionAttrib() {};

	VersionAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_STRING, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_Version(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_Version_allowed(ty);}
};

//	Attribute BoolScalarDyn class definition
class BoolScalarDynAttrib: public Tango::Attr
{
public:
	BoolScalarDynAttrib():Attr("BoolScalarDyn",
	                   Tango::DEV_BOOLEAN, Tango::READ) {};
	~BoolScalarDynAttrib() {};
	
	BoolScalarDynAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_BOOLEAN, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_BoolScalarDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_BoolScalarDyn_allowed(ty);}
};

//	Attribute BoolSpectrumDyn class definition
class BoolSpectrumDynAttrib: public Tango::SpectrumAttr
{
public:
	BoolSpectrumDynAttrib():SpectrumAttr("BoolSpectrumDyn",
	                   Tango::DEV_BOOLEAN, Tango::READ, MAX_ATTR_SIZE) {};
	~BoolSpectrumDynAttrib() {};
	
	BoolSpectrumDynAttrib(const string &att_name, long size):SpectrumAttr(att_name.c_str(),
		                   Tango::DEV_BOOLEAN, Tango::READ, size) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_BoolSpectrumDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_BoolSpectrumDyn_allowed(ty);}
};

//	Attribute StringSpectrumDyn class definition
class StringSpectrumDynAttrib: public Tango::SpectrumAttr
{
public:
	StringSpectrumDynAttrib():SpectrumAttr("StringSpectrumDyn",
	                   Tango::DEV_STRING, Tango::READ, MAX_ATTR_SIZE) {};
	~StringSpectrumDynAttrib() {};

	StringSpectrumDynAttrib(const string &att_name, long size):SpectrumAttr(att_name.c_str(),
		                   Tango::DEV_STRING, Tango::READ, size) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_StringSpectrumDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_StringSpectrumDyn_allowed(ty);}
};

//	Attribute DoubleScalarDyn class definition
class DoubleScalarDynAttrib: public Tango::Attr
{
public:
	DoubleScalarDynAttrib():Attr("DoubleScalarDyn",
	                   Tango::DEV_DOUBLE, Tango::READ) {};
	~DoubleScalarDynAttrib() {};

	DoubleScalarDynAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_DOUBLE, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_DoubleScalarDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_DoubleScalarDyn_allowed(ty);}
};

//	Attribute DoubleSpectrumDyn class definition
class DoubleSpectrumDynAttrib: public Tango::SpectrumAttr
{
public:
	DoubleSpectrumDynAttrib():SpectrumAttr("DoubleSpectrumDyn",
	                   Tango::DEV_DOUBLE, Tango::READ, MAX_ATTR_SIZE) {};
	~DoubleSpectrumDynAttrib() {};

	DoubleSpectrumDynAttrib(const string &att_name, long size):SpectrumAttr(att_name.c_str(),
		                   Tango::DEV_DOUBLE, Tango::READ, size) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_DoubleSpectrumDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_DoubleSpectrumDyn_allowed(ty);}
};

//	Attribute LongScalarDyn class definition
class LongScalarDynAttrib: public Tango::Attr
{
public:
	LongScalarDynAttrib():Attr("LongScalarDyn",
	                   Tango::DEV_LONG, Tango::READ) {};
	~LongScalarDynAttrib() {};

	LongScalarDynAttrib(const string &att_name):Attr(att_name.c_str(),
		                   Tango::DEV_LONG, Tango::READ) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_LongScalarDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_LongScalarDyn_allowed(ty);}
};

//	Attribute LongSpectrumDyn class definition
class LongSpectrumDynAttrib: public Tango::SpectrumAttr
{
public:
	LongSpectrumDynAttrib():SpectrumAttr("LongSpectrumDyn",
	                   Tango::DEV_LONG, Tango::READ, MAX_ATTR_SIZE) {};
	~LongSpectrumDynAttrib() {};

	LongSpectrumDynAttrib(const string &att_name, long size):SpectrumAttr(att_name.c_str(),
		                   Tango::DEV_LONG, Tango::READ, size) {};

	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SequencerConf *>(dev))->read_LongSpectrumDyn(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SequencerConf *>(dev))->is_LongSpectrumDyn_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================
//	Command Start class definition
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SequencerConf *>(dev))->is_Start_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SequencerConf *>(dev))->is_Stop_allowed(any);}
};

//	Command Pause class definition
class PauseClass : public Tango::Command
{
public:
	PauseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	PauseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~PauseClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SequencerConf *>(dev))->is_Pause_allowed(any);}
};

//	Command Acknowledge class definition
class AcknowledgeClass : public Tango::Command
{
public:
	AcknowledgeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AcknowledgeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AcknowledgeClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SequencerConf *>(dev))->is_Acknowledge_allowed(any);}
};



/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	SequencerConfClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(SequencerConf::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	SequencerConf::Additionnal DServer data members



public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static SequencerConfClass *init(const char *);
	static SequencerConfClass *instance();
	~SequencerConfClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	SequencerConfClass(string &);
	static SequencerConfClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	SEQUENCERCONFCLASS_H

