/*----- PROTECTED REGION ID(SequencerConf.h) ENABLED START -----*/
//=============================================================================
//
// file :        SequencerConf.h
//
// description : Include for the SequencerConf class.
//
// project :     Configurable Sequencer.
//
// $Author: graziano $
//
// $Revision: 1.4 $
// $Date: 2015-01-26 10:03:54 $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/sequencerconf/src/SequencerConf.h,v $
// $Log: SequencerConf.h,v $
// Revision 1.4  2015-01-26 10:03:54  graziano
// fixed
//
// Revision 1.3  2013-11-20 13:44:42  graziano
// development
//
// Revision 1.2  2013-11-19 14:58:56  graziano
// development
//
// Revision 1.1  2013-11-15 08:15:09  graziano
// first commit
//
//
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SEQUENCERCONF_H
#define SEQUENCERCONF_H


#include <tango.h>

#define MAX_ATTR_SIZE	100
#define LOG_SIZE		50

#include <boost/version.hpp>

#if BOOST_VERSION  < 103600
#include <boost/spirit/tree/ast.hpp>					//for ast parse trees (in tree_formula)
#else
#include <boost/spirit/include/classic_ast.hpp>			//for ast parse trees (in tree_formula)
#endif

#include "sequencerthread.h"

#if BOOST_VERSION  < 103600
typedef std::string::iterator  iterator_t;
typedef boost::spirit::node_val_data_factory<unsigned int> factory_t;		//want a modified node to contain an unsigned int value
typedef boost::spirit::tree_match<iterator_t, factory_t> parse_tree_match_t;
typedef boost::spirit::tree_parse_info<iterator_t, factory_t>    tree_parse_info_t;
#else
typedef std::string::iterator  iterator_t;
typedef boost::spirit::classic::node_val_data_factory<unsigned int> factory_t;		//want a modified node to contain an unsigned int value
typedef boost::spirit::classic::tree_match<iterator_t, factory_t> parse_tree_match_t;
typedef boost::spirit::classic::tree_parse_info<iterator_t, factory_t>    tree_parse_info_t;
#endif

typedef parse_tree_match_t::tree_iterator iter_t;

/*----- PROTECTED REGION END -----*/


/**
 *	SequencerConf class Description:
 *	
 */

namespace SequencerConf_ns
{
	/*----- PROTECTED REGION ID(SequencerConf::Additional Class Declarations) ENABLED START -----*/

	//		Additional Class Declarations
#if 0
class SequencerConf;
/*
 * event callback
 */
class EventCallBack : public Tango::CallBack {
	public:
		EventCallBack(void);
		~EventCallBack(void);
		void push_event(Tango::EventData* ev);
		void init(SequencerConf *p);
	private:
	SequencerConf *mydevice;
	//vector<SequencerConf *> mydevices;
};

#endif

typedef struct
{
	string remote_name;
	string remote_device_name;
	string remote_attr_name;
	Tango::DeviceProxy *remote_device;
	unsigned int eid;
	vector<double> value;	//double for any type of Attribute (except DevString)
	vector<string> value_string;	//added for DevString attributes
	struct timespec last_read;
	//int stat_index;
	bool event_error;		//if event error, goes in polling
	struct timespec last_event_rx;
} remote_dev_t;

typedef struct
{
	string formula;
	tree_parse_info_t formula_tree;
	unsigned int attr_index;
	string descr;
	string error;
	int timeout;
	vector<string> remote_name;	//list of remote attrs in this formula
	string type;
	bool first;
	struct timespec start;
	int step;

} attr_desc_t;

typedef struct
{
	Tango::DevBoolean val[MAX_ATTR_SIZE];
	Tango::DevBoolean old_val[MAX_ATTR_SIZE];
	Tango::DevDouble val_d[MAX_ATTR_SIZE];
	Tango::DevDouble old_val_d[MAX_ATTR_SIZE];
	Tango::DevLong val_l[MAX_ATTR_SIZE];
	Tango::DevLong old_val_l[MAX_ATTR_SIZE];

} attr_val_t;

typedef struct
{
	vector<Tango::DevBoolean> val_b;
	vector<string> val_s;
} rem_val_t;

typedef struct
{
	char val[MAX_ATTR_SIZE][128];

} attr_val_string_t;

typedef struct
{
	string remote_cmd_name;
	int cmd_code;
	int cmd_offset;
	int cmd_offset2;
	int cmd_offset3;
	int cmd_offset4;
	string pass;

} cmd_desc_t;

	/*----- PROTECTED REGION END -----*/	//	SequencerConf::Additional Class Declarations


class SequencerConf : public Tango::Device_4Impl
{

	/*----- PROTECTED REGION ID(SequencerConf::Data Members) ENABLED START -----*/

	//		Add your own data members
	friend class CmdClass;
protected:

    map<string,attr_desc_t>   att_data;	//attr name->vector (for spectrum attr) of attr_desc_t (formula tree)
    vector<remote_dev_t> remote_devices;			//array of remote attributes (proxy, array of values)
    map<string,attr_val_t >   att_value;			//attr name->array of values (for set_value)


    void string_explode(string, string, vector<string>*);
    void init_attributeprop();
    long create_dynamic_command(const char* cmd_name, Tango::CmdArgType type_in, Tango::CmdArgType type_out, long size_in, long size_out);
    void create_dynamic_attributes(vector<string> attr_config);

    double eval_formula(tree_parse_info_t tree, string attr_name, string &attr_values);
    double eval_expression(iter_t const& i, string attr_name, string &attr_values); //throw (string &), std::out_of_range
    void eval_func_tango(iter_t const& i, string attr_name, string &attr_values, double &value, string &string_value); //throw (string &), std::out_of_range
    void find_device_formula(tree_parse_info_t tree, vector<string> & devs);
    void eval_node_device(iter_t const& i, vector<string> & devs);

    void extract_values(Tango::DeviceAttribute *attr_value, vector<double> &val, vector<string> &val_string);
    void extract_values(Tango::DeviceData *attr_value, vector<double> &val, vector<string> &val_string);
    void extract_set_values(Tango::DeviceAttribute *attr_value, vector<double> &val, string &val_string);
    Tango::DeviceAttribute* insert_values(Tango::AttributeInfoEx attr_info, string attr_name, vector<double> val, vector<string> val_string);
    vector<remote_dev_t>::iterator find_events(string event_name) throw(string&);

    void add_log_str(string log);

    //Tango::DeviceProxy *lldevice;

    struct timespec last_read;

    struct timespec start_time;
    int RemainingTime;

    map<string,cmd_desc_t>   cmd_data;

    char version_str[1024];
    char log_str[LOG_SIZE][2048];
    int log_str_size;
    char stepstatus_str[1024];
    char steperror_str[1024];

    readthread *read_loop;
    friend class readthread;
#if 0
    EventCallBack ecb;
    friend class EventCallBack;
#endif
    bool created_attr;
    int attr_index;

    int step;
    void abort_sleep(double time);
public:


	/*----- PROTECTED REGION END -----*/	//	SequencerConf::Data Members


//	Device property data members
public:		//	Attr_config_file:
	string	attr_config_file;
	//	Attr_config_prop:
	vector<string>	attr_config_prop;
	//	Polling_period:
	double	polling_period;
	//	Read_timeout:
	//double	read_timeout;
	//	DefaultStepTimeout:
	double	defaultStepTimeout;
	

//	Attribute data members
public:
	Tango::DevBoolean	*attr_BoolScalarDyn_read;
	Tango::DevBoolean	*attr_BoolSpectrumDyn_read;
	Tango::DevString	*attr_StringSpectrumDyn_read;
	Tango::DevDouble	*attr_DoubleScalarDyn_read;
	Tango::DevDouble	*attr_DoubleSpectrumDyn_read;
	Tango::DevLong	*attr_LongScalarDyn_read;
	Tango::DevLong	*attr_LongSpectrumDyn_read;
	Tango::DevString	*attr_Version_read;
	Tango::DevString	*attr_Log_read;
	Tango::DevString	*attr_StepStatus_read;
	Tango::DevString	*attr_StepError_read;
	Tango::DevLong	*attr_Step_read;
	Tango::DevLong	*attr_RemainingTime_read;
	Tango::DevLong	*attr_ElapsedTime_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SequencerConf(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SequencerConf(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SequencerConf(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~SequencerConf() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	/**
	 *	Method      : SequencerConf::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	BoolScalarDyn attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar 
	 */
	virtual void read_BoolScalarDyn(Tango::Attribute &attr);
	virtual bool is_BoolScalarDyn_allowed(Tango::AttReqType type);



	/**
	 *	BoolSpectrumDyn attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Spectrum  max = 1000
	 */
	virtual void read_BoolSpectrumDyn(Tango::Attribute &attr);
	virtual bool is_BoolSpectrumDyn_allowed(Tango::AttReqType type);



	/**
	 *	StringSpectrumDyn attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Spectrum  max = 1000
	 */
	virtual void read_StringSpectrumDyn(Tango::Attribute &attr);
	virtual bool is_StringSpectrumDyn_allowed(Tango::AttReqType type);



	/**
	 *	DoubleScalarDyn attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar
	 */
	virtual void read_DoubleScalarDyn(Tango::Attribute &attr);
	virtual bool is_DoubleScalarDyn_allowed(Tango::AttReqType type);



	/**
	 *	DoubleSpectrumDyn attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Spectrum  max = 1000
	 */
	virtual void read_DoubleSpectrumDyn(Tango::Attribute &attr);
	virtual bool is_DoubleSpectrumDyn_allowed(Tango::AttReqType type);



	/**
	 *	LongScalarDyn attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevLong
	 *	Attr type:	Scalar
	 */
	virtual void read_LongScalarDyn(Tango::Attribute &attr);
	virtual bool is_LongScalarDyn_allowed(Tango::AttReqType type);



	/**
	 *	LongSpectrumDyn attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevLong
	 *	Attr type:	Spectrum  max = 1000
	 */
	virtual void read_LongSpectrumDyn(Tango::Attribute &attr);
	virtual bool is_LongSpectrumDyn_allowed(Tango::AttReqType type);



	/**
	 *	Version attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar
	 */
	virtual void read_Version(Tango::Attribute &attr);
	virtual bool is_Version_allowed(Tango::AttReqType type);



	/**
	 *	Log attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Spectrum  max = 1000
	 */
	virtual void read_Log(Tango::Attribute &attr);
	virtual bool is_Log_allowed(Tango::AttReqType type);



	/**
	 *	StepStatus attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar
	 */
	virtual void read_StepStatus(Tango::Attribute &attr);
	virtual bool is_StepStatus_allowed(Tango::AttReqType type);



	/**
	 *	StepError attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar
	 */
	virtual void read_StepError(Tango::Attribute &attr);
	virtual bool is_StepError_allowed(Tango::AttReqType type);



	/**
	 *	Step attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevLong
	 *	Attr type:	Scalar
	 */
	virtual void read_Step(Tango::Attribute &attr);
	virtual bool is_Step_allowed(Tango::AttReqType type);



	/**
	 *	RemainingTime attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevLong
	 *	Attr type:	Scalar
	 */
	virtual void read_RemainingTime(Tango::Attribute &attr);
	virtual bool is_RemainingTime_allowed(Tango::AttReqType type);



	/**
	 *	ElapsedTime attribute related methods.
	 *	Description:
	 *
	 *	Data type:	Tango::DevLong
	 *	Attr type:	Scalar
	 */
	virtual void read_ElapsedTime(Tango::Attribute &attr);
	virtual bool is_ElapsedTime_allowed(Tango::AttReqType type);



	/**
	 *	Method      : SequencerConf::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
		void add_dynamic_attributes();


//	Command related methods
public: 

	/**
	 *	Command Start related methods.
	 */
	virtual void start();
	virtual bool is_Start_allowed(const CORBA::Any &any);

	/**
	 *	Command Stop related methods.
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);

	/**
	 *	Command Pause related methods.
	 */
	virtual void pause();
	virtual bool is_Pause_allowed(const CORBA::Any &any);

	/**
	 *	Acknowledge Pause related methods.
	 */
	virtual void acknowledge();
	virtual bool is_Acknowledge_allowed(const CORBA::Any &any);




	/*----- PROTECTED REGION ID(SequencerConf::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	SequencerConf::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(SequencerConf::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions
class CmdClass : public Tango::Command
{
public:
	CmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level,
				   int size_in,
				   Tango::DeviceImpl *dev)
	:Command(name,in,out,in_desc,out_desc, level)	{_max_in=size_in;};

	CmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   int size_in,
				   Tango::DeviceImpl *dev)
	:Command(name,in,out)	{_max_in=size_in;};
	~CmdClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return true/*(static_cast<TangoLib *>(dev))->is_Cmd_allowed(any)*/;}

	int _max_in;
	SequencerConf *mydevice;
};

	/*----- PROTECTED REGION END -----*/	//	SequencerConf::Additional Classes Definitions

} //	namespace

#endif	//	SEQUENCERCONF_H
